import request from 'supertest';
import app from '../../src/testApp.js';
import User from '../../src/model/User.js';
import { clearTestDB, createTestUser, createTestUsers } from '../../src/utils/testUtils.js';
import { hashPassword } from '../../src/utils/password.js';

describe('Authentication API', () => {
  beforeEach(async () => {
    await clearTestDB();
  });

  describe('POST /api/auth/sign-up', () => {
    it('should register a new user successfully', async () => {
      const userData = {
        email: 'newuser@example.com',
        password: 'TestPassword123!',
        site_id: '507f1f77bcf86cd799439011' // Mock ObjectId
      };

      const response = await request(app)
        .post('/api/auth/sign-up')
        .send(userData)
        .expect(201);

      expect(response.body).toHaveProperty('message', 'Đăng ký thành công!');
      expect(response.body).toHaveProperty('accessToken');

      // Verify user was created in database
      const createdUser = await User.findOne({ email: userData.email });
      expect(createdUser).toBeTruthy();
      expect(createdUser.email).toBe(userData.email);
    });

    it('should reject registration with existing email', async () => {
      const userData = {
        email: 'existing@example.com',
        password: 'TestPassword123!',
        site_id: '507f1f77bcf86cd799439011'
      };

      // Create user first
      await User.create({
        ...userData,
        password: await hashPassword(userData.password)
      });

      const response = await request(app)
        .post('/api/auth/sign-up')
        .send(userData)
        .expect(400);

      expect(response.body).toHaveProperty('message', 'Email đã được sử dụng');
    });

    it('should reject registration with invalid email', async () => {
      const userData = {
        email: 'invalid-email',
        password: 'TestPassword123!',
        site_id: '507f1f77bcf86cd799439011'
      };

      const response = await request(app)
        .post('/api/auth/sign-up')
        .send(userData)
        .expect(400);

      expect(response.body).toHaveProperty('message');
    });

    it('should reject registration with weak password', async () => {
      const userData = {
        email: 'test@example.com',
        password: 'weak',
        site_id: '507f1f77bcf86cd799439011'
      };

      const response = await request(app)
        .post('/api/auth/sign-up')
        .send(userData)
        .expect(400);

      expect(response.body).toHaveProperty('message');
    });
  });

  describe('POST /api/auth/sign-in', () => {
    it('should sign in with valid credentials', async () => {
      const userData = {
        email: 'signin@example.com',
        password: 'TestPassword123!',
        site_id: '507f1f77bcf86cd799439011'
      };

      // Create user first
      await User.create({
        ...userData,
        password: await hashPassword(userData.password)
      });

      const response = await request(app)
        .post('/api/auth/sign-in')
        .send({
          email: userData.email,
          password: userData.password
        })
        .expect(200);

      expect(response.body).toHaveProperty('message', 'Đăng nhập thành công!');
      expect(response.body).toHaveProperty('accessToken');
    });

    it('should reject sign in with invalid email', async () => {
      const response = await request(app)
        .post('/api/auth/sign-in')
        .send({
          email: 'nonexistent@example.com',
          password: 'TestPassword123!'
        })
        .expect(400);

      expect(response.body).toHaveProperty('message', 'Email không tồn tại');
    });

    it('should reject sign in with incorrect password', async () => {
      const userData = {
        email: 'wrongpass@example.com',
        password: 'TestPassword123!',
        site_id: '507f1f77bcf86cd799439011'
      };

      // Create user first
      await User.create({
        ...userData,
        password: await hashPassword(userData.password)
      });

      const response = await request(app)
        .post('/api/auth/sign-in')
        .send({
          email: userData.email,
          password: 'WrongPassword123!'
        })
        .expect(400);

      expect(response.body).toHaveProperty('message', 'Mật khẩu không đúng');
    });

    it('should reject sign in for inactive user', async () => {
      const userData = {
        email: 'inactive@example.com',
        password: 'TestPassword123!',
        site_id: '507f1f77bcf86cd799439011',
        active: false
      };

      // Create inactive user
      await User.create({
        ...userData,
        password: await hashPassword(userData.password)
      });

      const response = await request(app)
        .post('/api/auth/sign-in')
        .send({
          email: userData.email,
          password: userData.password
        })
        .expect(400);

      expect(response.body).toHaveProperty('message', 'Người dùng không hoạt động');
    });
  });

  describe('GET /api/auth/', () => {
    it('should get user info with valid token', async () => {
      const userData = {
        email: 'getuser@example.com',
        password: 'TestPassword123!',
        site_id: '507f1f77bcf86cd799439011'
      };

      // Create user and sign in to get token
      await User.create({
        ...userData,
        password: await hashPassword(userData.password)
      });

      const signInResponse = await request(app)
        .post('/api/auth/sign-in')
        .send({
          email: userData.email,
          password: userData.password
        });

      const token = signInResponse.body.accessToken;

      const response = await request(app)
        .get('/api/auth/')
        .set('Authorization', `Bearer ${token}`)
        .expect(200);

      expect(response.body).toHaveProperty('data');
      expect(response.body.data.email).toBe(userData.email);
      expect(response.body.data.password).toBeUndefined();
    });

    it('should reject request without token', async () => {
      const response = await request(app)
        .get('/api/auth/')
        .expect(403);

      expect(response.body).toHaveProperty('message', 'Authorization header is missing');
    });

    it('should reject request with invalid token', async () => {
      const response = await request(app)
        .get('/api/auth/')
        .set('Authorization', 'Bearer invalid-token')
        .expect(500); // JWT verification error

      expect(response.body).toHaveProperty('message');
    });
  });

  describe('POST /api/auth/send-otp', () => {
    it('should send OTP for existing user', async () => {
      const userData = {
        email: 'otp@example.com',
        password: 'TestPassword123!',
        site_id: '507f1f77bcf86cd799439011'
      };

      // Create user first
      await User.create({
        ...userData,
        password: await hashPassword(userData.password)
      });

      // Mock sendEmail to prevent actual email sending in tests
      const mockSendEmail = jest.fn(() => true);
      jest.doMock('../../src/utils/sendEmail.js', () => mockSendEmail);

      const response = await request(app)
        .post('/api/auth/send-otp')
        .send({ email: userData.email })
        .expect(200);

      expect(response.body).toHaveProperty('message', 'Gửi email thành công!');
      expect(response.body).toHaveProperty('id');

      // Verify OTP was saved to user
      const updatedUser = await User.findOne({ email: userData.email });
      expect(updatedUser.otp).toBeTruthy();
      expect(updatedUser.otpCreatedAt).toBeTruthy();
    });

    it('should reject OTP request for non-existent user', async () => {
      const response = await request(app)
        .post('/api/auth/send-otp')
        .send({ email: 'nonexistent@example.com' })
        .expect(400);

      expect(response.body).toHaveProperty('message', 'Email không tồn tại!');
    });

    it('should reject OTP request without email', async () => {
      const response = await request(app)
        .post('/api/auth/send-otp')
        .send({})
        .expect(400);

      expect(response.body).toHaveProperty('message', 'Email không được để trống!');
    });
  });
});
